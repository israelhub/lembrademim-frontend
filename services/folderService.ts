import { apiRequest } from './api';

// Tipos para as APIs de pasta
export interface Folder {
  id: number;
  name: string;
  userId?: number;
  biographyCount?: number;
  createdAt?: string;
  updatedAt?: string;
}

export interface CreateFolderRequest {
  name: string;
}

export interface UpdateFolderRequest {
  name: string;
}

export interface CreateBiographyFolderRequest {
  biographyId: number | string;
  folderId: number | string;
}

export interface BiographyFolder {
  id: number;
  biographyId: number;
  folderId: number;
  createdAt: string;
}

// Servi√ßos de pasta
export const folderService = {
  // Buscar todas as pastas
  async getFolders(): Promise<Folder[]> {
    return apiRequest<Folder[]>('/folder');
  },

  // Buscar pasta por ID
  async getById(id: number): Promise<Folder> {
    return apiRequest<Folder>(`/folder/${id}`);
  },

  // Criar nova pasta
  async createFolder(data: CreateFolderRequest): Promise<Folder> {
    return apiRequest<Folder>('/folder', {
      method: 'POST',
      body: JSON.stringify(data),
    });
  },

  // Atualizar pasta
  async updateFolder(id: number, data: UpdateFolderRequest): Promise<Folder> {
    try {
      console.log(`‚úèÔ∏è Tentando atualizar pasta ${id} com dados:`, data);
      
      const result = await apiRequest<Folder>(`/folder/${id}`, {
        method: 'PATCH',
        body: JSON.stringify(data),
      });
      
      console.log(`‚úÖ Pasta ${id} atualizada com sucesso:`, result);
      return result;
    } catch (error) {
      console.error(`‚ùå Erro ao atualizar pasta ${id}:`, error);
      throw error;
    }
  },

  // Deletar pasta
  async deleteFolder(id: number): Promise<void> {
    try {
      console.log(`üóëÔ∏è Tentando excluir pasta ${id}`);
      
      // Tenta buscar biografias associadas √† pasta antes de exclu√≠-la
      try {
        const biographies = await this.getBiographiesByFolder(id.toString());
        if (biographies && biographies.length > 0) {
          console.log(`‚ö†Ô∏è Pasta ${id} cont√©m ${biographies.length} biografias`);
          throw new Error('Esta pasta cont√©m biografias e n√£o pode ser exclu√≠da. Remova as biografias da pasta primeiro.');
        }
      } catch (checkError) {
        if (checkError instanceof Error && checkError.message.includes('cont√©m biografias')) {
          throw checkError;
        }
        // Se o erro n√£o for sobre biografias, continuamos com a exclus√£o
        console.log('‚ö†Ô∏è Verifica√ß√£o de biografias: continuando com a exclus√£o', checkError);
      }
      
      // Excluir a pasta
      // Para m√©todos DELETE, alguns servidores n√£o aceitam body, ent√£o usamos params de URL
      await apiRequest<void>(`/folder/${id}`, {
        method: 'DELETE',
        // N√£o inclu√≠mos body em requisi√ß√µes DELETE
      });
      
      console.log(`‚úÖ Pasta ${id} exclu√≠da com sucesso`);
      return;
    } catch (error) {
      console.error(`‚ùå Erro ao excluir pasta ${id}:`, error);
      
      // Repassar o erro para ser tratado pelo hook
      if (error instanceof Error) {
        throw error;
      } else {
        throw new Error('Erro ao excluir pasta. Verifique se a pasta n√£o tem nenhuma rela√ß√£o com outros dados do sistema.');
      }
    }
  },

  // M√âTODOS PARA BIOGRAPHYFOLDER
  // Buscar todas as pastas
  async getAll(): Promise<Folder[]> {
    return apiRequest<Folder[]>('/folder');
  },

  // Criar associa√ß√£o entre biografia e pasta
  async addBiographyToFolder(data: CreateBiographyFolderRequest): Promise<BiographyFolder> {
    try {
      console.log('üîó Adicionando biografia √† pasta:', data);
      
      // Converter IDs para n√∫meros se forem strings
      const requestData = {
        biographyId: typeof data.biographyId === 'string' ? parseInt(data.biographyId as string, 10) : data.biographyId,
        folderId: typeof data.folderId === 'string' ? parseInt(data.folderId as string, 10) : data.folderId
      };
      
      console.log('üîó Dados convertidos:', requestData);
      
      return apiRequest<BiographyFolder>('/biographyfolder', {
        method: 'POST',
        body: JSON.stringify(requestData),
      });
    } catch (error) {
      console.error('‚ùå Erro ao adicionar biografia √† pasta:', error);
      throw error;
    }
  },

  // Remover associa√ß√£o entre biografia e pasta
  async removeBiographyFromFolder(biographyId: number | string, folderId: number | string): Promise<void> {
    try {
      console.log('üóëÔ∏è Removendo biografia da pasta:', { biographyId, folderId });
      
      // Converter IDs para n√∫meros se forem strings
      const numericBiographyId = typeof biographyId === 'string' ? parseInt(biographyId, 10) : biographyId;
      const numericFolderId = typeof folderId === 'string' ? parseInt(folderId as string, 10) : folderId;
      
      console.log('üóëÔ∏è IDs convertidos:', { numericBiographyId, numericFolderId });
      
      // Para m√©todos DELETE, pode ser melhor usar querystring ou par√¢metros URL em vez de body
      // Tentativa 1: DELETE com par√¢metros na URL
      try {
        return await apiRequest<void>(
          `/biographyfolder/remove?biographyId=${numericBiographyId}&folderId=${numericFolderId}`, 
          { method: 'DELETE' }
        );
      } catch (error1) {
        console.log('‚ö†Ô∏è Falha na tentativa 1 de remo√ß√£o, tentando alternativa:', error1);
        
        // Tentativa 2: DELETE com body tradicional
        return await apiRequest<void>('/biographyfolder', {
          method: 'DELETE',
          body: JSON.stringify({
            biographyId: numericBiographyId,
            folderId: numericFolderId
          }),
        });
      }
    } catch (error) {
      console.error('‚ùå Erro ao remover biografia da pasta:', error);
      throw error;
    }
  },

  // Buscar todas as pastas de uma biografia
  async getFoldersByBiography(biographyId: string | number): Promise<Folder[]> {
    try {
      console.log('üîé Iniciando busca de pastas para biografia:', biographyId);
      console.log('üîé Tipo do biographyId:', typeof biographyId);
      
      // Converter para n√∫mero se for string num√©rica
      const numericId = typeof biographyId === 'string' ? parseInt(biographyId, 10) : biographyId;
      
      console.log('üîé ID convertido para n√∫mero:', numericId);
      
      // Verificar se temos token de autentica√ß√£o
      const { getAuthToken } = await import('./api');
      const token = await getAuthToken();
      console.log('üîê Token dispon√≠vel:', token ? 'SIM' : 'N√ÉO');
      
      // Tentar a chamada da API com o ID num√©rico
      try {
        const result = await apiRequest<Folder[]>(`/biographyfolder/biography/${numericId}`);
        console.log('üìÅ Resultado da API getFoldersByBiography:', result);
        console.log('üìÅ Tipo do resultado:', typeof result);
        console.log('üìÅ √â array?', Array.isArray(result));
        console.log('üìÅ Pastas encontradas:', result?.length || 0);
        
        if (Array.isArray(result) && result.length > 0) {
          result.forEach((folder, index) => {
            console.log(`üìÅ Pasta ${index + 1}:`, {
              id: folder.id,
              name: folder.name,
              userId: folder.userId,
              biographyCount: folder.biographyCount
            });
          });
        }
        
        return result || [];
      } catch (apiError) {
        // Verificar se o erro √© 404 "Biografia n√£o encontrada"
        // Neste caso, a biografia existe mas n√£o tem pastas associadas
        if (apiError instanceof Error && 
            apiError.message.includes('404') && 
            (apiError.message.includes('Biografia n√£o encontrada') || 
             (apiError as any).response?.includes('Biografia n√£o encontrada'))) {
          console.log('‚ö†Ô∏è Biografia existe mas n√£o tem pastas associadas, retornando array vazio');
          return [];
        }
        
        console.error('‚ùå Erro na API com ID num√©rico, tentando com ID original:', apiError);
        
        // Se o erro n√£o for 404 "Biografia n√£o encontrada", tenta com o ID original
        try {
          const result = await apiRequest<Folder[]>(`/biographyfolder/biography/${biographyId}`);
          return result || [];
        } catch (secondError) {
          // Se ambas as tentativas falharem, verifica novamente se √© o erro "Biografia n√£o encontrada"
          if (secondError instanceof Error && 
              secondError.message.includes('404') && 
              (secondError.message.includes('Biografia n√£o encontrada') || 
               (secondError as any).response?.includes('Biografia n√£o encontrada'))) {
            console.log('‚ö†Ô∏è Biografia existe mas n√£o tem pastas associadas, retornando array vazio');
            return [];
          }
          
          throw secondError;
        }
      }
    } catch (error) {
      console.error('‚ùå Erro detalhado ao buscar pastas da biografia:', error);
      console.error('‚ùå Stack trace:', error instanceof Error ? error.stack : 'Sem stack trace');
      // Retornar array vazio em vez de lan√ßar erro para evitar que a UI quebre
      console.log('‚ö†Ô∏è Retornando array vazio devido ao erro');
      return [];
    }
  },

  // Buscar todas as biografias de uma pasta
  async getBiographiesByFolder(folderId: string | number): Promise<any[]> {
    try {
      console.log('üìñ Buscando biografias para pasta:', folderId);
      
      // Converter para n√∫mero se for string
      const numericId = typeof folderId === 'string' ? parseInt(folderId, 10) : folderId;
      console.log('üìñ ID convertido para n√∫mero:', numericId);
      
      try {
        // Tentar com ID num√©rico
        const result = await apiRequest<any[]>(`/biographyfolder/folder/${numericId}`);
        console.log('üìñ Biografias encontradas:', result?.length || 0);
        
        // Adicionar logs para entender a estrutura dos dados
        if (result && result.length > 0) {
          console.log('üìñ Exemplo do primeiro resultado:', JSON.stringify(result[0]));
          
          // Verificar qual √© o formato da resposta
          const keys = Object.keys(result[0]);
          console.log('üìñ Propriedades do primeiro item:', keys.join(', '));
          
          // Ver se temos a propriedade biography ou biographyId
          if (result[0].biography) {
            console.log('üìñ Formato detectado: tem propriedade biography');
          } else if (result[0].biographyId) {
            console.log('üìñ Formato detectado: tem propriedade biographyId');
          } else {
            console.log('üìñ Formato desconhecido, verificando propriedades manualmente');
          }
        }
        
        return result || [];
      } catch (apiError) {
        console.error('‚ùå Erro na API com ID num√©rico, tentando com ID original:', apiError);
        // Se falhar com ID num√©rico, tenta com o ID original
        const result = await apiRequest<any[]>(`/biographyfolder/folder/${folderId}`);
        
        // Mesmo diagn√≥stico para a segunda tentativa
        if (result && result.length > 0) {
          console.log('üìñ [2¬™ tentativa] Exemplo do primeiro resultado:', JSON.stringify(result[0]));
          console.log('üìñ [2¬™ tentativa] Propriedades:', Object.keys(result[0]).join(', '));
        }
        
        return result || [];
      }
    } catch (error) {
      console.error('‚ùå Erro ao buscar biografias da pasta:', error);
      // Retornar array vazio em vez de lan√ßar erro para evitar que a UI quebre
      console.log('‚ö†Ô∏è Retornando array vazio devido ao erro');
      return [];
    }
  },
  
  // Remover biografia de todas as pastas
  async removeBiographyFromAllFolders(biographyId: string | number): Promise<void> {
    try {
      console.log('üóëÔ∏è Removendo biografia de todas as pastas:', biographyId);
      
      // Converter para n√∫mero se for string
      const numericId = typeof biographyId === 'string' ? parseInt(biographyId, 10) : biographyId;
      
      // Buscar todas as pastas da biografia
      const folders = await this.getFoldersByBiography(numericId);
      
      // Remover biografia de cada pasta
      const promises = folders.map(folder => 
        this.removeBiographyFromFolder(numericId, folder.id)
      );
      
      // Aguardar todas as remo√ß√µes
      await Promise.all(promises);
      
      console.log('‚úÖ Biografia removida de todas as pastas com sucesso');
    } catch (error) {
      console.error('‚ùå Erro ao remover biografia de todas as pastas:', error);
      throw error;
    }
  },
};
